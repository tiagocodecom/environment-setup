networks:
  backend_network:
    driver: ${DOCKER_NETWORKS_DRIVER}

volumes:
  postgres_data:
    driver: ${DOCKER_VOLUMES_DRIVER}

  redis_data:
    driver: ${DOCKER_VOLUMES_DRIVER}

  backoffice_codebase:
    driver: ${DOCKER_VOLUMES_DRIVER}
  
services:
  traefik:
    build:
      context: ./docker/traefik
      args:
        - TRAEFIK_VERSION=${TRAEFIK_VERSION}
    environment:
      - CF_API_EMAIL=${TRAEFIK_CF_EMAIL}
      - CF_API_KEY=${TRAEFIK_CF_API_KEY}
    command:
      # log/
      - "--log.level=debug"
      # api
      - "--api"
      - "--api.dashboard=true"
      # providers
      - "--providers.docker.exposedbydefault=false"
      # entrypoints
      - "--entrypoints.web_insecure.address=:80"
      - "--entrypoints.web_secure.address=:443"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.redis.address=:6379"
      # middleware for redirecting traffic to https
      #- "--entrypoints.web_insecure.http.redirections.entryPoint.to=web_secure"
      #- "--entrypoints.web_insecure.http.redirections.entryPoint.scheme=https"
      #- "--entrypoints.web_insecure.http.redirections.entryPoint.permanent=false"
      # tls
      - "--entrypoints.web_secure.http.tls.domains[0].main=${PROJECT_DOMAIN_NAME}"
      - "--entrypoints.web_secure.http.tls.domains[0].sans=*.${PROJECT_DOMAIN_NAME}"
      - "--certificatesresolvers.lets_encrypt.acme.storage=/data/acme.json"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge=true"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.delayBeforeCheck=0"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.lets_encrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.lets_encrypt.acme.dnsChallenge.resolvers=${TRAEFIK_CF_DNS}"
      # the following line is the caserver for testing the certificates generating (comment it for prod)
      # - "--certificatesresolvers.lets_encrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # accesslogb
      - "--accesslog.filepath=/data/access.log"
    ports:
      - "80:80"
      - "443:443"
      - "5432:5432"
      - "6379:6379"
    networks:
      - backend_network
    volumes:
      - ./docker/traefik/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web_secure"
      - "traefik.http.routers.traefik.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.traefik.rule=Host(`${PROJECT_SUBDOMAIN_PREFIX}traefik.${PROJECT_DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=8888"
      - "traefik.http.routers.traefik.middlewares=access-auth"
      - "traefik.http.middlewares.access-auth.basicauth.realm=Login Required"
      - "traefik.http.middlewares.access-auth.basicauth.users=${TRAEFIK_USER_PASSWORD}"      

  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend_network
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./docker/postgres/initdb.d:/docker-entrypoint-initdb.d"
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.service=postgres"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"

  redis:
    build:
      context: ./docker/redis
      args:
        - REDIS_VERSION=${REDIS_VERSION}
    command: --requirepass ${REDIS_PASSWORD}
    networks:
      - backend_network
    volumes:
      - redis_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.redis.service=redis"
      - "traefik.tcp.routers.redis.entryPoints=redis"
      - "traefik.tcp.services.redis.loadbalancer.server.port=:6379"

  nginx:
    build:
      context: ./docker/nginx
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - NGINX_PHPFPM_HOST=backoffice
        - NGINX_SERVER_ROOT=/var/www/html/web
    volumes:
      - ${BACKOFFICE_HOST_PATH}:/var/www/html:cached
    networks:
      - backend_network
    depends_on:
      - backoffice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.entrypoints=web_secure"
      - "traefik.http.routers.nginx.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.nginx.rule=Host(`${PROJECT_SUBDOMAIN_PREFIX}admin.${PROJECT_DOMAIN_NAME}`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

  backoffice: 
    image: $BACKOFFICE_IMAGE:$BACKOFFICE_VERSION
    environment:
      PHP_VERSION: $BACKOFFICE_PHP_VERSION
      DRUPAL_DB_HOST: $BACKOFFICE_DB_HOST
      DRUPAL_SERVER_HOST: nginx
      DRUPAL_DB_DRIVER: $BACKOFFICE_DB_DRIVER
      DRUPAL_DB_PREFIX: $BACKOFFICE_DB_PREFIX
      DRUPAL_DB_NAME: $POSTGRES_DB
      DRUPAL_DB_USER: $POSTGRES_USER
      DRUPAL_DB_PASSWORD: $POSTGRES_PASSWORD
      DRUPAL_HASH_SALT: $BACKOFFICE_HASH_SALT
      DRUPAL_SLD: $PROJECT_SECOND_LEVEL_DOMAIN
      DRUPAL_CONFIG_SYNC_PATH: $BACKOFFICE_CONFIG_SYNC_CONTAINER_PATH
      DRUPAL_PRIVATE_FILES_PATH: $BACKOFFICE_PRIVATE_FILE_CONTAINER_PATH
      DRUPAL_PUBLIC_FILES_BASE_URL: https://${PROJECT_SUBDOMAIN_PREFIX}admin.${PROJECT_DOMAIN_NAME}/sites/default/files
      DRUPAL_S3FS_ACCESS_KEY:  $AWS_ACCESS_KEY
      DRUPAL_S3FS_SECRET_KEY: $AWS_SECRET_KEY
      DRUPAL_S3FS_BUCKET: $AWS_BACKOFFICE_S3_BUCKET
      DRUPAL_S3FS_REGION: $AWS_BACKOFFICE_S3_REGION
    volumes:
      - ${BACKOFFICE_HOST_PATH}:/var/www/html:cached
    networks:
      - backend_network
 
  website:
    image: $WEBSITE_IMAGE:$WEBSITE_VERSION
    environment:      
      JSONAPI_BASE_URL: http://nginx
      JSONAPI_USERNAME: $WEBSITE_JSONAPI_USERNAME
      JSONAPI_PASSWORD: $WEBSITE_JSONAPI_PASSWORD
      JSONAPI_IMAGES_URL: $WEBSITE_JSONAPI_IMAGES_URL
    networks:
      - backend_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.website.entrypoints=web_secure"
      - "traefik.http.routers.website.tls.certresolver=lets_encrypt"
      - "traefik.http.routers.website.rule=Host(`${PROJECT_SUBDOMAIN_PREFIX}website.${PROJECT_DOMAIN_NAME}`)"
      - "traefik.http.services.website.loadbalancer.server.port=3000"
      - "traefik.http.services.website.loadbalancer.server.scheme=http"
      - "traefik.http.middlewares.website-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.website.middlewares=website-headers"